/*
 * 🌟 babel的功能就是 解析 + 转换，所以他的插件分为2中：语法插件、转换插件
 * 1、语法插件：这些插件只允许 Babel 解析（parse） 特定类型的语法（不是转换），可以在 AST 转换时使用，以支持解析新语法
 *
 * 2、转换插件：将讲过语法解析后的内容转换为可执行内容，转换插件会启用相应的语法插件(因此不需要同时指定这两种插件)
 */

// babel-loader 使用 babel 解析文件;
// @babel/core 是 babel 的核心模块;
// @babel/preset-react 转译 jsx 语法;
// @babel/preset-env 解析/转译 ES6语法
// @babel/polyfill 转换内置方法，如Promise、WeakMap、Object.assign/Array.prototype.includes等
// 为了添加这些功能，polyfill 将添加到全局范围和类似 String 这样的内置原型中(会对全局环境造成污染，后面我们会介绍不污染全局环境的方法)
// ⚠⚠️V7.4.0 版本开始，@babel/polyfill 已经被废弃(前端发展日新月异)，需单独安装 core-js 和 regenerator-runtime 模块
//
// @babel/plugin-transform-runtime 是一个可以重复使用 Babel 注入的帮助程序，以节省代码大小的插件
// 它和 @babel/preset-env 一样都能提供 ES 新API 的垫片，都可实现按需加载，但前者不会污染原型链；还可以解决Promise 或 .includes 这种新的 es 特性

{
  // 通过使用或创建一个 preset 即可轻松使用一组插件。
  // presets 的执行顺序是从后到前的
  "presets": [
    [
      "@babel/preset-env", // @babel/preset-env 所包含的插件将支持所有最新的JS特性(ES2015,ES2016等，不包含 stage 阶段)，将其转换成ES5代码
      {
        // 防止babel将任何模块类型都转译成CommonJS类型，导致tree-shaking失效问题
        // 目的在于不要将 import 和 export 关键字处理成 commonJS 的模块导出引入方式，比如 require ，
        // 这样的话才能支持 tree-shaking，因为我们的tree-shaking，在 ES6 模块导入方式下才会有效。
        "modules": false,
        "loose": true
      }
    ],
    "@babel/preset-react",
    "@babel/preset-typescript"
  ],
  // plugins 顺序执行
  "plugins": [["@babel/plugin-proposal-class-properties", { "loose": true }]] // loose: 当设置为 true 时，类属性将被编译为赋值表达式而不是 Object.defineProperty
}
